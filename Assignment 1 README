Assignment 1

Problem 1: I started by storing the given data (number list, target) in a dictionary. I then iterate over the list and calculate the number complement to reach the target sum. 
If a pair is found then it is returned and their positions in the dictionary is printed out, like [0, 1]. 
This code basically checks over the given dictionary while checking for number complements, and if it is unable to find it initially the number complements get stored for later use in case a solution comes up later.
This runs in O(n) time complexity. I tried avoiding using more loops, or nested loops specifically since that could end up adding to the time complexity. 
I spent a bit of time looking up how to use Python dictionaries for quick searches after initially trying out loops that looked over the whole thing multiple times. 
This should(?) be a more optimal solution than the nested loops I mentioned beforehand, but I'm not sure if I can further optimize it. Plus, I can return the indices more easily with fewer lines.

Problem 2: Since I'm looking for a target number in an array, at the very start I made a check to see if the number even exists in the array at all. 
This lets me quickly return an answer without having to spend more time doing something. The first search is pretty basic and straightforward; just start searching from the beginning to the end. 
I spent some time trying to figure out how to find the ending position in the list. 
Initially I thought up of instantly cutting to where the first number was found then search forward from there, adding the amount of numbers skipped to the found number position to correct it. 
Then I remembered that I could actually reverse the list and search "forward", which seemed a lot less convoluted than my other idea. The "- 1" exists to correct the position of where a number is found since its reversed, otherwise it'd end up repeating the same number as the forward search.
I think this runs in O(n) time complexity, it can kinda depend based on the list length. Otherwise it should be fairly simple in runtime since its just searching a list twice, otherwise just returning nuber not found.

Problem 3: I just merged both arrays and sorted them, then I calculated how many elements are in that array. If the number of elements is odd, the median is just the middlemost number. 
If it's even, the median is the average of the two middlemost numbers.
This code is pretty simple, I'm not sure what else I could do to optimize it. I just stuck with merging both of the arrays since I didn't know how to properly implement other methods. Admittedly this will likely be worse with larger arrays it has to fully go through.

Problem 4: I looked around on LeetCode's website on the discussion page to see what other people were talking about. To be honest I had a hard time figuring out what to actually do for this problem.
First I thought okay, I'll make a list exist first then work from there. I'll count how many elements exist, then single out the element that needs to be removed. Actually implementing it was kind of a nightmare to work.
I then ran into the problem of something just bricking my program when I did multiple prints for test cases like in problems 1-3, so I just made it user input as a workaround.
This is definitely really inefficient but at least it works, and I have less of a headache.

Problem 5: I made the same ListNode for managing linked lists to begin with from problem 4. I'll do the same merging lists together, then sort then out. I mostly pulled a lot from problem 4 in converting a linked list to a Python list in order to print out results.
I probably could've imported some libraries but I'm not s ure if that's actually allowed(?) so I just made a regular user input for lists. Had to make some extra work so it could read mutliple lists like (1 2 3) (4 5 6), taking out the whitespaces.
Then I just merge stuff into a linked list, convert that to Python list, and print out said list for the user. Also included a check for if lists are empty.
