Assignment 5

Problem 1: A BFS will be used to go through a given input. 'count' is used to keep track of open parenthesis (, incrementing for ( and decrementing for ) to make a pair, 
so if 'count' ends up going negative with too many ) the string becomes invalid. Queue named 'deque' keeps the original string, with 'tracked' tracking strings already processed 
to avoid any duplicates. New strings are generated by removing a parenthesis.
The time complexity is about O(2^n) depending on the size of the input.

Problem 2: BST inorder traversal starts to get a sorted sequence of nodes, then each node gets compared to a previously visited node to check for differences.
The float value in 'self.minimal' being set to inf makes it so any valid comparison will replace it, rather than me having to set a manual check.
self.minimal is updated if a difference is smaller, and self.prev is updated to the current node's value to keep track.
Time complexit is about O(N) since it does an inorder traversal of the BST, N represents how many nodes are being visited.
